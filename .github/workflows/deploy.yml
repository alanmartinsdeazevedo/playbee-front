name: PlayBee Frontend - Deploy

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    # Extrair versão da tag
    - name: Extract version
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/frontend-v*.*.* ]]; then
          VERSION=${GITHUB_REF#refs/tags/frontend-}
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "🏷️ Deploying tagged version: $VERSION"
        else
          VERSION="main-$(echo $GITHUB_SHA | cut -c1-7)"
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "🚀 Deploying main branch: $VERSION"
        fi

    - name: Log in to Docker Hub
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    # Build imagem Docker
    - name: Build Docker image
      run: |
        echo "🔨 Building PlayBee Frontend version ${{ steps.version.outputs.VERSION }}"
        docker build -f Dockerfile \
          --build-arg NEXT_PUBLIC_API_URL="${{ vars.NEXT_PUBLIC_API_URL }}" \
          --build-arg NEXT_PUBLIC_APP_NAME="PlayBee" \
          --build-arg NEXT_PUBLIC_PWA_NAME="PlayBee" \
          --build-arg NEXT_PUBLIC_PWA_SHORT_NAME="PlayBee" \
          --build-arg NEXT_PUBLIC_APP_URL="${{ vars.NEXT_PUBLIC_APP_URL }}" \
          -t ${{ secrets.DOCKER_IMAGE_NAME }}:${{ steps.version.outputs.VERSION }} .
        docker build -f Dockerfile \
          --build-arg NEXT_PUBLIC_API_URL="${{ vars.NEXT_PUBLIC_API_URL }}" \
          --build-arg NEXT_PUBLIC_APP_NAME="PlayBee" \
          --build-arg NEXT_PUBLIC_PWA_NAME="PlayBee" \
          --build-arg NEXT_PUBLIC_PWA_SHORT_NAME="PlayBee" \
          --build-arg NEXT_PUBLIC_APP_URL="${{ vars.NEXT_PUBLIC_APP_URL }}" \
          -t ${{ secrets.DOCKER_IMAGE_NAME }}:latest .

    # Push Docker
    - name: Push Docker image
      run: |
        echo "📤 Pushing PlayBee Frontend version ${{ steps.version.outputs.VERSION }}"
        docker push ${{ secrets.DOCKER_IMAGE_NAME }}:${{ steps.version.outputs.VERSION }}
        docker push ${{ secrets.DOCKER_IMAGE_NAME }}:latest

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Test SSH connectivity and add known hosts
      run: |
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        
        echo "🔍 Testing connectivity to ${{ secrets.SSH_HOST }}"
        
        # Testar conectividade básica primeiro
        if ! nc -z ${{ secrets.SSH_HOST }} 22; then
          echo "❌ Cannot connect to SSH port 22"
          exit 1
        fi
        
        echo "✅ SSH port is reachable"
        
        # Adicionar known hosts com timeout
        echo "🔍 Adding SSH host keys..."
        timeout 30 ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts || {
          echo "⚠️ ssh-keyscan with -H failed, trying without..."
          timeout 30 ssh-keyscan ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
        }
        
        chmod 644 ~/.ssh/known_hosts
        
        # Verificar se foi adicionado
        if [ -s ~/.ssh/known_hosts ]; then
          echo "✅ SSH known hosts configured successfully"
          echo "📋 Known hosts entries: $(wc -l < ~/.ssh/known_hosts)"
        else
          echo "❌ Failed to add known hosts"
          exit 1
        fi

    - name: Test SSH connection
      run: |
        echo "🔑 Testing SSH connection..."
        ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=yes ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} 'echo "✅ SSH connection successful"'

    # Deploy no servidor EC2
    - name: Deploy PlayBee Frontend
      run: |
        ssh -o ConnectTimeout=30 -o StrictHostKeyChecking=yes ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} '
          echo "🚀 Deploying PlayBee Frontend version ${{ steps.version.outputs.VERSION }}"

          docker login -u "${{ secrets.DOCKER_USERNAME }}" -p "${{ secrets.DOCKER_PASSWORD }}"

          # Pull da nova versão
          docker pull ${{ secrets.DOCKER_IMAGE_NAME }}:${{ steps.version.outputs.VERSION }}

          # Backup do container atual
          docker stop playbee-frontend || true
          docker rename playbee-frontend playbee-frontend-backup-$(date +%s) || true

          # Deploy da nova versão
          docker run -d --name playbee-frontend -p 3002:3002 \
            -e PORT=3002 \
            --restart unless-stopped \
            ${{ secrets.DOCKER_IMAGE_NAME }}:${{ steps.version.outputs.VERSION }}

          # Aguardar inicialização
          sleep 10

          # Verificar se está funcionando
          if docker ps | grep -q playbee-frontend; then
            echo "✅ Frontend Deploy successful! Version ${{ steps.version.outputs.VERSION }} is running"
            
            # Remover backup se tudo funcionou
            docker rm playbee-frontend-backup-* 2>/dev/null || true
            
            # Mostrar status
            docker ps | grep playbee-frontend
            echo "📄 Frontend logs:"
            docker logs playbee-frontend --tail 15
          else
            echo "❌ Frontend Deploy failed! Rolling back..."
            docker stop playbee-frontend || true
            docker rm playbee-frontend || true

            # Restaurar backup
            BACKUP_CONTAINER=$(docker ps -a | grep playbee-frontend-backup | head -1 | awk "{print \$1}")
            if [ ! -z "$BACKUP_CONTAINER" ]; then
              docker start $BACKUP_CONTAINER
              docker rename $BACKUP_CONTAINER playbee-frontend
              echo "🔄 Frontend Rollback completed"
            fi
            exit 1
          fi

          # Limpeza de imagens antigas
          echo "🧹 Cleaning old frontend images..."
          docker system prune -a -f --volumes
          docker images ${{ secrets.DOCKER_IMAGE_NAME }} --format "{{.Tag}}" | grep -E "^(v|main-)" | sort -V | head -n -5 | xargs -I {} docker rmi ${{ secrets.DOCKER_IMAGE_NAME }}:{} 2>/dev/null || true
        '